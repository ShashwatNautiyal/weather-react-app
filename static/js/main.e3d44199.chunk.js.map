{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","input","setInput","info","setInfo","cities","setCities","citiesName","cityName","map","city","name","useEffect","fetchWeather","fetch","then","Response","json","data","location","icon","current","condition","temp","temp_c","wind","wind_kph","text","humidity","visibility","vis_km","aqi","air_quality","so2","catch","err","console","error","selectCity","e","target","innerText","searchCity","key","type","bgChanger","parentElement","randomColorRight","Math","floor","random","toString","randomColorLeft","style","background","className","onKeyUp","length","value","onChange","i","filter","toLowerCase","includes","suggBox","placeholder","onClick","pointerEvents","faSearch","display","res","index","src","alt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e3d44199.chunk.js","sourcesContent":["import './App.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\nimport { useEffect, useState } from 'react';\nimport cityName from './world-cities.json';\n\nfunction App() {\n\tconst [input, setInput] = useState('India');\n\tconst [info, setInfo] = useState([]);\n\tconst [cities, setCities] = useState([]);\n\n\tconst citiesName = cityName.map((city) => city.name);\n\n\tuseEffect(() => {\n\t\tfetchWeather();\n\t}, []);\n\n\tconst fetchWeather = () => {\n\t\tconst apiKey = '777fada3af8749ba8a3200421212206';\n\n\t\tfetch(`https://api.weatherapi.com/v1/current.json?key=${apiKey}&q=${input}&aqi=yes`)\n\t\t\t.then((Response) => Response.json())\n\t\t\t.then((data) =>\n\t\t\t\tsetInfo({\n\t\t\t\t\tname: data.location.name,\n\t\t\t\t\ticon: data.current.condition.icon,\n\t\t\t\t\ttemp: data.current.temp_c,\n\t\t\t\t\twind: data.current.wind_kph,\n\t\t\t\t\tcondition: data.current.condition.text,\n\t\t\t\t\thumidity: data.current.humidity,\n\t\t\t\t\tvisibility: data.current.vis_km,\n\t\t\t\t\taqi: data.current.air_quality.so2,\n\t\t\t\t})\n\t\t\t)\n\t\t\t.catch((err) => console.error(err));\n\t};\n\n\tconst suggBox = (e) => {\n\t\tlet i = 0;\n\t\tsetCities(\n\t\t\tcitiesName.filter((city) => {\n\t\t\t\tif (city.toLowerCase().includes(e.toLowerCase()) && i < 6) {\n\t\t\t\t\ti += 1;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t})\n\t\t);\n\t};\n\n\tconst selectCity = (e) => {\n\t\tsetInput(e.target.innerText);\n\t\tsetCities([]);\n\t};\n\n\tconst searchCity = (e) => {\n\t\tif (e.key === 'Enter' || e.type === 'click') {\n\t\t\tfetchWeather(cities[0]);\n\n\t\t\tsetCities([]);\n\t\t\tbgChanger(e.target.parentElement.parentElement.parentElement);\n\t\t}\n\t};\n\n\tconst bgChanger = (e) => {\n\t\tconst randomColorRight = Math.floor(Math.random() * 16777215).toString(16);\n\t\tconst randomColorLeft = Math.floor(Math.random() * 16777215).toString(16);\n\t\te.style.background = `linear-gradient(to right, #${randomColorLeft}, #${randomColorRight})`;\n\t\te.style.background = `-webkit-linear-gradient(to right, #${randomColorLeft}, #${randomColorRight})`;\n\t};\n\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t<div className=\"weather-card\">\n\t\t\t\t<div className=\"input-box\">\n\t\t\t\t\t<input\n\t\t\t\t\t\tonKeyUp={searchCity}\n\t\t\t\t\t\tclassName={\n\t\t\t\t\t\t\tcities.length === 0 || cities.length === citiesName.length || !input\n\t\t\t\t\t\t\t\t? 'input'\n\t\t\t\t\t\t\t\t: 'input active'\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvalue={input}\n\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\tsetInput(e.target.value);\n\t\t\t\t\t\t\tsuggBox(e.target.value);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tplaceholder=\"City\"\n\t\t\t\t\t/>\n\t\t\t\t\t<div className=\"search-btn\" onClick={searchCity}>\n\t\t\t\t\t\t<FontAwesomeIcon style={{ pointerEvents: 'none' }} icon={faSearch} />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"searchSugg\" style={{ display: input ? 'block' : 'none' }}>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t{cities.map((res, index) => (\n\t\t\t\t\t\t\t<li key={index} onClick={selectCity}>\n\t\t\t\t\t\t\t\t{res}\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"weather-info\">\n\t\t\t\t\t<div className=\"left-info\">\n\t\t\t\t\t\t<p>Weather in {info.name}</p>\n\t\t\t\t\t\t<div className=\"temperature-info\">\n\t\t\t\t\t\t\t<img className=\"icon\" src={info.icon} alt=\"\" />\n\t\t\t\t\t\t\t<h2>{info.temp}Â°C</h2>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<p>{info.condition}</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"right-info\">\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<p>Air Quality:</p>\n\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t{Math.floor(info.aqi)} <sup>so2</sup>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<p>Humidity: </p>\n\t\t\t\t\t\t\t<span>{info.humidity}%</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<p>Visibilty: </p>\n\t\t\t\t\t\t\t<span>{info.visibility} km</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<p>Wind: </p>\n\t\t\t\t\t\t\t<span>{info.wind} km/h</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}